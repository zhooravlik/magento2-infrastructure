<?xml version="1.0" encoding="utf-8"?>
<!--
/**
 * Apache Ant's build file for core development static tests
 *
 * Copyright Â© 2015 Magento. All rights reserved.
 * See COPYING.txt for license details.
 */
-->
<project name="Core Development Static Tests" basedir="../../../../" default="_static_tests_all">
    <import file="../util.xml"/>

    <target name="_jshint_path_substitution" description="JsHint Javascript file path substitution from environment variable">
        <fail unless="phpunit_config_file" message="Property 'phpunit_config_file' must be defined"/>
        <fail unless="env.JsHintPath" message="Environment variable 'JsHintPath' must be defined"/>
        <replace file="${phpunit_config_file}">
            <replacefilter token="{{tests_jshint_path}}" value="${env.JsHintPath}"/>
        </replace>
    </target>

    <target name="_static_tests_no_js" depends="_product_location,_composer_install" description="All static tests without JS static test">
        <copy file="${basedir}/dev/build/core_dev/static/phpunit.php.xml"
              tofile="${product_root_dir}/dev/tests/static/phpunit.xml" overwrite="true"/>
        <copy file="${basedir}/dev/build/core_dev/static/pdepend.xml"
              tofile="${product_root_dir}/dev/tests/static/pdepend.xml" overwrite="true"/>
        <replace file="${product_root_dir}/dev/tests/static/pdepend.xml">
            <replacefilter token="{{pdepend_cache_path}}" value="${product_root_dir}/var/pdepend"/>
        </replace>
        <condition property="env.bamboo_file_formats" value="php,phtml">
            <not><isset property="env.bamboo_file_formats"/></not>
        </condition>

        <antcall target="_get_github_changed_files">
            <param name="file_path" value="/dev/tests/static/testsuite/Magento/Test/Php/_files"/>
        </antcall>

        <exec dir="${product_root_dir}/dev/tests/static" executable="phpunit" failonerror="true">
            <arg line="--log-junit ${basedir}/static_tests_no_js.xml"/>
        </exec>
        <delete dir="${product_root_dir}/var/pdepend"/>
    </target>

    <target name="_vendor_static_tests_no_js" depends="_product_location,_composer_install" description="All static tests without JS static test">
        <copy file="${basedir}/dev/build/core_dev/static/phpunit.php.xml"
              tofile="${product_root_dir}/dev/tests/static/phpunit.xml" overwrite="true"/>
        <copy file="${basedir}/dev/build/core_dev/static/pdepend.xml"
              tofile="${product_root_dir}/dev/tests/static/pdepend.xml" overwrite="true"/>
        <replace file="${product_root_dir}/dev/tests/static/pdepend.xml">
            <replacefilter token="{{pdepend_cache_path}}" value="${product_root_dir}/var/pdepend"/>
        </replace>
        <condition property="env.bamboo_file_formats" value="php,phtml">
            <not><isset property="env.bamboo_file_formats"/></not>
        </condition>

        <exec dir="${product_root_dir}/dev/tests/static" executable="phpunit" failonerror="true">
            <arg line="--log-junit ${basedir}/static_tests_no_js.xml"/>
        </exec>
        <delete dir="${product_root_dir}/var/pdepend"/>
    </target>

    <target name="_code_legacy_tests" depends="_product_location,_composer_install" description="Code Legacy Tests">
        <condition property="env.bamboo_file_formats" value="php,phtml">
            <not><isset property="env.bamboo_file_formats"/></not>
        </condition>

        <antcall target="_get_github_changed_files">
            <param name="file_path" value="/dev/tests/static/testsuite/Magento/Test/Legacy/_files"/>
        </antcall>

        <script language="javascript"><![CDATA[
            var currentRepoUrl = project.getProperty('env.bamboo_repository_git_repositoryUrl');
            var incrementalBuild = project.getProperty('env.bamboo_incremental_build');
            var mainlineRepo = project.getProperty('env.bamboo_mainline_repo');

            if (currentRepoUrl.contains("com:")) {
                var teamRepo = currentRepoUrl.substring(currentRepoUrl.lastIndexOf(":") +1, currentRepoUrl.lastIndexOf("/"));
            } else {
                var parts = currentRepoUrl.split("/");
                var teamRepo = parts[parts.length - 2];
            }

            if (incrementalBuild != 'disable' && teamRepo != mainlineRepo) {
                importClass(java.io.File);

                //replace placeholders in phpunit.legacy.xml file
                var file = project.getProperty('basedir') + '/dev/build/core_dev/static/phpunit.legacy.xml';
                var replace = project.createTask('replace');
                replace.setFailOnNoReplacements(true);
                replace.setFile(new File(file));
                var openingReplaceFilter = replace.createReplacefilter();
                openingReplaceFilter.setToken('<!--incremental_build_placeholder');
                openingReplaceFilter.setValue(' ');
                var closingReplaceFilter = replace.createReplacefilter();
                closingReplaceFilter.setToken('incremental_build_placeholder-->');
                closingReplaceFilter.setValue(' ');
                replace.execute();
            }
        ]]></script>

        <copy file="${basedir}/dev/build/core_dev/static/phpunit.legacy.xml"
              tofile="${product_root_dir}/dev/tests/static/phpunit.xml" overwrite="true"/>
        <exec dir="${product_root_dir}/dev/tests/static" executable="phpunit" failonerror="true">
            <arg line="--log-junit ${basedir}/code_legacy_tests.xml"/>
        </exec>
    </target>

    <target name="_get_github_changed_files" description="Load changed files from github">
        <fail unless="file_path" message="Property 'file_path' must be defined"/>
        <script language="javascript"><![CDATA[
            // executes github compare request
            function executeChecklistTask(checklistVariables)
            {
                var get_github_changes = project.createTask('exec');
                get_github_changes.setExecutable('php');
                get_github_changes.setResultProperty('script_exit_code');
                var arg = get_github_changes.createArg();
                var command = "-f " + project.getProperty('basedir')
                        + "/dev/build/core_dev/static/get_github_changes.php --"
                        + " --base-path=" + checklistVariables['base_path']
                        + " --file-formats=" + checklistVariables['file_formats']
                        + " --edition-code=" + checklistVariables['edition_code']
                        + " --output-file=" + checklistVariables['output_file']
                arg.setLine(command);
                get_github_changes.execute();
            }

            // copies changes file to destination path
            function copyChangesFile(destination_path, output_file)
            {
                importClass(java.io.File);

                //copy a file with list of changed files
                var copyTask = project.createTask('copy');
                copyTask.setFile(new File(project.getProperty('basedir') + '/' + output_file));
                copyTask.setTofile(new File(project.getProperty('product_root_dir') + destination_path + '/' + output_file));
                copyTask.setOverwrite(true);
                copyTask.execute();
            }

            var currentBranch = project.getProperty('env.bamboo_repository_git_branch');
            var currentRepoUrl = project.getProperty('env.bamboo_repository_git_repositoryUrl');
            var additionalOptions = project.getProperty('env.bamboo_additional_options');
            var fileFormats = project.getProperty('env.bamboo_file_formats');
            var incrementalBuild = project.getProperty('env.bamboo_incremental_build');
            var mainlineRepo = project.getProperty('env.bamboo_mainline_repo');

            if (currentRepoUrl.contains("com:")) {
                var teamRepo = currentRepoUrl.substring(currentRepoUrl.lastIndexOf(":") +1, currentRepoUrl.lastIndexOf("/"));
            } else {
                var parts = currentRepoUrl.split("/");
                var teamRepo = parts[parts.length - 2];
            }

            if (incrementalBuild != 'disable' && teamRepo != mainlineRepo) {
                //get ce changelist from github
                checklistVariables = {
                    base_path: project.getProperty('basedir'),
                    file_formats: fileFormats,
                    edition_code: 'ce',
                    output_file: 'changed_files_ce.txt'
                };
                executeChecklistTask(checklistVariables)

                if (project.getProperty('script_exit_code') == 0) {
                    copyChangesFile(project.getProperty("file_path"), checklistVariables['output_file'])
                }

                //get ee changelist from github
                if (project.getProperty('env.bamboo_m2ee_repo') && project.getProperty('script_exit_code') == 0) {
                    checklistVariables = {
                        base_path: project.getProperty('basedir'),
                        file_formats: fileFormats,
                        edition_code: 'ee',
                        output_file: 'changed_files_ee.txt'
                    };
                    executeChecklistTask(checklistVariables)

                    if (project.getProperty('script_exit_code') == 0) {
                        copyChangesFile(project.getProperty("file_path"), checklistVariables['output_file'])
                    }
                }
            }
        ]]></script>
    </target>

    <target name="_code_integrity_tests" depends="_product_location,_composer_install,_run_compiler" description="Code Integrity Tests">
        <copy file="${basedir}/dev/build/core_dev/static/phpunit.integrity.xml"
              tofile="${product_root_dir}/dev/tests/static/phpunit.xml" overwrite="true"/>
        <exec dir="${product_root_dir}/dev/tests/static" executable="phpunit" failonerror="true">
            <arg line="--log-junit ${basedir}/code_integrity_tests.xml"/>
        </exec>
    </target>

    <target name="_sanity_check" depends="_product_location,_composer_install" description="Static sanity check">
        <fail unless="product_edition_code" message="Property 'product_edition_code' must be defined"/>
        <exec executable="php" failonerror="true">
            <arg line="-f ${basedir}/dev/build/publication/sanity/sanity.php --
                -w ${product_root_dir}
                -c ${basedir}/dev/build/publication/sanity/${product_edition_code}.xml
                -v
                "/>
        </exec>
    </target>

    <target name="static_tests_ee" depends="_server_info,_enterprise_edition" description="Static tests for EE">
        <antcall>
            <target name="_static_tests_no_js"/>
        </antcall>
    </target>

    <target name="static_tests_b2b" depends="_server_info,_b2b_edition" description="Static tests for B2B">
        <antcall>
            <target name="_static_tests_no_js"/>
        </antcall>
    </target>
    <target name="vendor_static_tests_ee" depends="_server_info" description="Static tests for EE">
        <antcall>
            <target name="_vendor_static_tests_no_js"/>
        </antcall>
    </target>

    <target name="sanity_check_ce" depends="_server_info,_community_edition" description="Sanity Check for CE">
        <antcall>
            <param name="product_edition_code" value="ce"/>
            <target name="_sanity_check"/>
        </antcall>
    </target>

    <target name="sanity_check_ee" depends="_server_info" description="Sanity Check for EE">
        <antcall>
            <param name="product_edition_code" value="ee"/>
            <target name="_product_edition_no_internal"/>
            <target name="_sanity_check"/>
        </antcall>
    </target>

    <target name="sanity_check_b2b" depends="_server_info" description="Sanity Check for B2B">
        <antcall>
            <param name="product_edition_code" value="b2b"/>
            <target name="_product_edition_no_internal"/>
            <target name="_sanity_check"/>
        </antcall>
    </target>

    <target name="static_tests_ce" depends="_server_info" description="Static tests for CE">
        <antcall>
            <param name="license_replacement_enabled" value="true"/>
            <param name="product_edition_code" value="ce"/>
            <target name="_product_edition"/>
            <target name="_static_tests_no_js"/>
        </antcall>
    </target>

    <target name="static_tests_js" depends="_server_info,_product_location,_composer_install" description="JS static tests">
        <copy file="${basedir}/dev/build/core_dev/static/phpunit.js.xml"
              tofile="${product_root_dir}/dev/tests/static/phpunit.xml" overwrite="true"/>
        <antcall target="_jshint_path_substitution">
            <param name="phpunit_config_file" value="${product_root_dir}/dev/tests/static/phpunit.xml"/>
        </antcall>
        <exec dir="${product_root_dir}/dev/tests/static" executable="phpunit" failonerror="true">
            <arg line="--log-junit ${basedir}/static_tests_js.xml"/>
        </exec>
    </target>

    <target name="code_legacy_tests_ee" depends="_server_info,_enterprise_edition" description="Code Legacy Tests for Enterprise Edition">
        <antcall>
            <target name="_code_legacy_tests"/>
        </antcall>
    </target>

    <target name="code_legacy_tests_b2b" depends="_server_info,_b2b_edition" description="Code Legacy Tests for B2B Edition">
        <antcall>
            <target name="_code_legacy_tests"/>
        </antcall>
    </target>

    <target name="code_legacy_tests_ce" depends="_server_info" description="Code Legacy Tests for Community Edition">
        <antcall>
            <param name="product_edition_code" value="ce"/>
            <target name="_product_edition"/>
            <target name="_code_legacy_tests"/>
        </antcall>
    </target>

    <target name="code_integrity_tests_ee" depends="_server_info,_enterprise_edition" description="Code Integrity Tests for Enterprise Edition">
        <antcall>
            <target name="_code_integrity_tests"/>
        </antcall>
    </target>

    <target name="code_integrity_tests_b2b" depends="_server_info,_b2b_edition" description="Code Integrity Tests for B2B Edition">
        <antcall>
            <target name="_code_integrity_tests"/>
        </antcall>
    </target>

    <target name="vendor_code_integrity_tests_ee" depends="_server_info,_vendor_enterprise_edition" description="Code Integrity Tests for Enterprise Edition">
        <antcall>
            <target name="_code_integrity_tests"/>
        </antcall>
    </target>

    <target name="code_integrity_tests_ce" depends="_server_info,_community_edition" description="Code Integrity Tests for Community Edition">
        <antcall target="_code_integrity_tests"/>
    </target>

</project>
